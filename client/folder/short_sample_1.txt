Start!!!

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.serialization.ClassResolvers;
import io.netty.handler.codec.serialization.ObjectDecoder;
import io.netty.handler.codec.serialization.ObjectEncoder;
import io.netty.handler.stream.ChunkedWriteHandler;

public class ServerApp {
private int port;

    public ServerApp(int port) {
        this.port = port;
    }

    public void run() throws Exception {
        EventLoopGroup bossGroup = new NioEventLoopGroup();
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(new ChannelInitializer<SocketChannel>() { // (4)
                        @Override
                        public void initChannel(SocketChannel ch) throws Exception {
                            ch.pipeline().addLast(
                                    new ObjectDecoder(50 * 1024 * 1024, ClassResolvers.cacheDisabled(null)),
                                    new ObjectEncoder(),
                                    new MainHandler());
                        }
                    })
                    .childOption(ChannelOption.SO_KEEPALIVE, true);
            ChannelFuture f = b.bind(port).sync();
            f.channel().closeFuture().sync();
        } finally {
            workerGroup.shutdownGracefully();
            bossGroup.shutdownGracefully();
        }
    }

    public static void main(String[] args) throws Exception {
        new ServerApp(8199).run();
    }
}

public class MainHandler extends ChannelInboundHandlerAdapter {
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        try {
            if (msg == null) {
                return;
            }
            if (msg instanceof FileRequest) {
                FileRequest fr = (FileRequest) msg;
                if (Files.exists(Paths.get("server_storage/" + fr.getFilename()))) {
                    FileMessage fm = new FileMessage(Paths.get("server_storage/" + fr.getFilename()));
                    ctx.writeAndFlush(fm);
                }
            }
        } finally {
            ReferenceCountUtil.release(msg);
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        ctx.close();
    }
}


public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Parent root = FXMLLoader.load(getClass().getResource("/sample.fxml"));
        primaryStage.setTitle("MyCloud");
        primaryStage.setScene(new Scene(root, 700, 700));
        primaryStage.show();
    }
}







import com.geekbrains.mycloud.common.AbstractMessage;
import com.geekbrains.mycloud.common.FileMessage;
import com.geekbrains.mycloud.common.FileRequest;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.util.ByteProcessor;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.ScatteringByteChannel;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.*;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.awt.*;
import java.io.*;
import java.net.URL;
import java.util.Arrays;
import java.util.List;

public class Controller implements Initializable {

//    @FXML
//    TextArea mainTextArea;

    @FXML
    TextField textField;

    @FXML
    VBox mainVBox;

    @FXML
    StackPane mainStackPane;

    @FXML
    ListView<String> myListView;

    @FXML
    Label filesDragAndDrop;

    @FXML
    Button btn;

    Desktop desktop = Desktop.getDesktop();
    FileChooser fileChooser = new FileChooser();

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        ObservableList<String> list = FXCollections.observableArrayList();
        initializeWindowDragAndDropLabel();
        initializeDragAndDropLabel();
        Network.start();
        Thread t = new Thread(() -> {
            try {
                while (true) {
                    AbstractMessage am = Network.readObject();
                    if (am instanceof FileMessage) {
                        FileMessage fm = (FileMessage) am;
                        Files.write(Paths.get("client_storage/" + fm.getFilename()), fm.getData(), StandardOpenOption.CREATE);
                        refreshLocalFilesList();

                    }
                }
            } catch (ClassNotFoundException | IOException e) {
                e.printStackTrace();
            } finally {
                Network.stop();
            }
        });
        t.setDaemon(true);
        t.start();
 //       refreshLocalFilesList();
    }

    public void pressOnDownloadBtn(ActionEvent actionEvent) {
        if (textField.getLength() > 0) {
            Network.sendMsg(new FileRequest(textField.getText()));
            NettyNetwork.getInstance().sendData();
   //         myListView.getItems().add(textField.getText() + "\n");
        textField.clear();
  //      textField.requestFocus();
        }
    }

    public void refreshLocalFilesList() {
        if (Platform.isFxApplicationThread()) {
            try {
                textField.clear();
                Files.list(Paths.get("client_storage")).map(p -> p.getFileName().toString()).forEach(o ->  myListView.getItems().add(o));
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            Platform.runLater(() -> {
                try {

                    Files.list(Paths.get("client_storage")).map(p -> p.getFileName().toString()).forEach(o ->  myListView.getItems().add(o));
                    textField.clear();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
        }
    }

    public void pressOnSendData(ActionEvent actionEvent) {
        NettyNetwork.getInstance().sendData();

}


    List<String> l=new ArrayList<>();

    public void addFiles(ActionEvent event) throws Exception {

        Stage stage = new Stage();
        File file = fileChooser.showOpenDialog(stage);
        if (file != null) {
            filesDragAndDrop.setText("");
            l.add(file.getName());
            for (String a : l) {
                String s = " -  " + a + "\n";
                filesDragAndDrop.setText(filesDragAndDrop.getText() + s);
            }
        }

        try (BufferedReader bf = new BufferedReader(new FileReader(file.getAbsolutePath()))) {
            Network.sendMsg(new FileRequest(file.getName()));
            String str;
            if ((str = bf.readLine()) != null) {
                System.out.println(file.getPath());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }


            FileRequest fr = new FileRequest(file.getName());

            Object msg = fr.getFilename();
            String str = (String) msg;
            byte[] arr = str.getBytes();
            ByteBufAllocator al = new PooledByteBufAllocator();
            ByteBuf buf = al.buffer(arr.length);
            buf.writeBytes(arr);
            buf.release();

        NettyNetwork.getInstance().sendData();


//        Path path = Paths.get(file.getName());
//        byte[] dat = Files.readAllBytes(path);
//            Files.write(Paths.get("server_storage/" + file.getName()), dat, StandardOpenOption.CREATE);


//       FileReader reader=new FileReader("server_storage/" + file.getName());
//       FileWriter writer=new FileWriter("client_storage/" + file.getName());
//       while(reader.ready())   {
//                int data =reader.read();
//                 reader.close();
//                 writer.close();}

        try  (PrintWriter out = new PrintWriter("server_storage/" + file.getName())) {
              out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

Финиш
Finish